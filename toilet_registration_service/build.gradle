plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'org.personal'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/release" }  // Spring의 릴리스 리포지토리 추가
	maven { url "https://repo.spring.io/milestone" }  // 필요시 마일스톤 리포지토리 추가
	maven { url "https://repo.spring.io/snapshot" }  // 필요시 스냅샷 리포지토리 추가
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR12"  // Spring Cloud BOM 추가
	}
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	queryDslVersion = '5.0.0'  // QueryDSL 버전 설정
}

dependencies {
	// Spring Boot Dependencies
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.hibernate.orm:hibernate-core:6.2.7.Final'
	implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'

	// Spring Cloud Stream & Kafka Dependencies
	implementation 'org.springframework.cloud:spring-cloud-stream'
	implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'

	// Lombok for code generation
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Database Drivers
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'

	// Development tools
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Testing
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Google Gson
	implementation 'com.google.code.gson:gson:2.10.1'

	// QueryDSL Dependencies
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
	implementation "com.querydsl:querydsl-core:${queryDslVersion}"

	// QueryDSL Annotation Processor
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
}

// QueryDSL 빌드 옵션
def querydslDir = "$buildDir/generated/querydsl"

// 경로 추가 >> QueryDSL 소스 코드 컴파일 시 빌드
sourceSets {
	main {
		java {
			srcDirs += querydslDir
		}
	}
}

// 컴파일 설정 (AnnotationProcessor가 생성하는 소스코드를 해당 경로로 설정)
tasks.withType(JavaCompile) {
	options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

// clean 실행 시 마지막 작업으로 디렉토리(QClass) 삭제 >> 충돌 방지
clean.doLast {
	delete querydslDir
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}
